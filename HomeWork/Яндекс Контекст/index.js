// Даны два числа A и B. Вам нужно вычислить их сумму A+B. В этой задаче для работы с входными и выходными данными вы можете использовать и файлы и потоки на ваше усмотрение.
// Формат ввода
// Первая строка входа содержит числа 
// A и B  разделенные пробелом
// Формат вывода
// В единственной строке выхода выведите сумму чисел A+B
// Пример 1
// Ввод 2 2 Вывод 4
// Пример 2
// Ввод 57 43 Вывод 100
// Пример 3 Ввод 123456789 673243342 Вывод 796700131

// const readline = require('readline');

// const rl = readline.createInterface({
//   input: process.stdin,
//   output: process.stdout
// });

// rl.on('line', line => {
//   const [a, b] = line.split(' ').map(Number);
//   const sum = a + b;
//   console.log(sum);
// });


// Данный код решает задачу на нахождение суммы двух чисел, которые читаются из стандартного ввода (клавиатура), и выводит ответ в стандартный вывод (консоль).

// Сначала создается объект readline.Interface с помощью метода createInterface и устанавливаются настройки ввода и вывода: ввод - стандартный ввод (process.stdin), вывод - стандартный вывод (process.stdout).

// Далее на объекте rl навешивается обработчик события line, который вызывается, когда пользователь вводит строку в консоль и нажимает Enter. В этом обработчике считывается введенная строка, разбивается на два числа по пробелу с помощью метода split, затем преобразуется в числа с помощью метода map и оператора Number, и вычисляется их сумма. Результат выводится в стандартный вывод с помощью метода console.log.

// 2-задача
// Даны два числа A и B. Вам нужно вычислить их сумму A+B. В этой задаче вам нужно читать из файла и выводить ответ в файл

// Формат ввода
// Первая строка входного файла содержит числа A и B (-2 ⋅ 109 ≤ A, B ≤ 2 ⋅ 109) разделенные пробелом

// Формат вывода
// В единственной строке выходного файла выведите сумму чисел A+B

// const fs = require('fs');

// // читаем данные из файла input.txt
// const input = fs.readFileSync('input.txt', 'utf-8').trim().split(' ');

// // парсим числа A и B из массива input
// const A = parseInt(input[0]);
// const B = parseInt(input[1]);

// // считаем сумму A и B
// const sum = A + B;

// // записываем результат в файл output.txt
// fs.writeFileSync('output.txt', sum.toString());


// Данное решение использует модуль fs для чтения данных из файла и записи результата в файл.

// Сначала считывается весь текст из файла input.txt, затем он разбивается на массив строк с помощью метода split(' '). Затем первый и второй элементы массива парсятся в числа A и B с помощью функции parseInt().

// Далее производится вычисление суммы A и B, результат сохраняется в переменной sum.

// Наконец, результат записывается в файл output.txt с помощью метода writeFileSync(), преобразованный в строку с помощью метода toString().


// 3-задача
// Даны два числа A и B. Вам нужно вычислить их сумму A+B. В этой задаче вам нужно читать из стандартного ввода и выводить ответ в стандартный вывод

// Формат ввода
// Первая строка входа содержит числа A и B (-2 ⋅ 109 ≤ A, B ≤ 2 ⋅ 109) разделенные пробелом

// Формат вывода
// В единственной строке выхода выведите сумму чисел A+B

// Пример 1
// Ввод 2 2	Вывод 4

// Пример 2
// Ввод 57 43	Вывод 100

// Пример 3
// Ввод 123456789 673243342	Вывод 796700131

// const readline = require('readline');

// const rl = readline.createInterface({
//   input: process.stdin,
//   output: process.stdout
// });

// rl.on('line', (input) => {
//   const nums = input.split(' ').map(Number);
//   const sum = nums[0] + nums[1];
//   console.log(sum);
// });

// Данный код использует модуль readline для чтения стандартного ввода и обработки введенных данных.

// Сначала создается экземпляр интерфейса readline, который принимает поток ввода и вывода - process.stdin и process.stdout соответственно.

// Затем устанавливается обработчик события 'line', который вызывается каждый раз, когда вводится новая строка. Обработчик получает введенную строку в параметре input.

// Внутри обработчика введенная строка разбивается на массив чисел методом split, затем каждый элемент массива преобразуется в число с помощью метода map.

// После этого находится сумма двух чисел, которая выводится в стандартный вывод методом console.log().

// 4 задача

// Даны две строки строчных латинских символов: строка J и строка S. Символы, входящие в строку J, — «драгоценности», входящие в строку S — «камни». Нужно определить, какое количество символов из S одновременно являются «драгоценностями». Проще говоря, нужно проверить, какое количество символов из S входит в J.
// Это разминочная задача, к которой мы размещаем готовые решения. Она очень простая и нужна для того, чтобы вы могли познакомиться с нашей автоматической системой проверки решений. Ввод и вывод осуществляется через файлы, либо через стандартные потоки ввода-вывода, как вам удобнее.

// Формат ввода
// На двух первых строках входного файла содержатся две строки строчных латинских символов: строка J и строка S. Длина каждой не превосходит 100 символов.
// Формат вывода
// Выходной файл должен содержать единственное число — количество камней, являющихся драгоценностями.
// Пример
// Ввод ab	Вывод aabbccd

// const readline = require('readline');
 
// const rl = readline.createInterface({
//     input: process.stdin
// });
 
// let lines = [];
// rl.on('line', (line) => {
//     lines.push(line);
// }).on('close', () => {
//     const [jewels, stones] = lines;
//     let result = 0;
//     for (let i = 0; i < stones.length; i++) {
//         if (jewels.includes(stones.charAt(i))) {
//             result++;
//         }
//     }
//     console.log(result);
// });
// Данное решение решает задачу о количестве драгоценных камней в строке S с помощью использования библиотеки Node.js readline.

// Сначала создается интерфейс для чтения данных из стандартного ввода, и на каждую введенную строку входных данных (J и S) добавляется элемент в массив lines. После того, как все данные были считаны, выполняется функция обратного вызова on('close', () => {...}).

// Внутри этой функции входные данные разбиваются на отдельные строки при помощи деструктуризации массива lines, затем происходит итерация по строке stones и для каждого символа в этой строке проверяется, входит ли он в строку jewels. Если да, то значение переменной result увеличивается на единицу.

// В конце функции console.log(result) выводит итоговый результат в стандартный вывод.

